import { INodeType } from 'n8n-workflow';
import { JetNetTool } from '../nodes/JetNetTool/JetNetTool.node';

describe('JetNetTool Node', () => {
	let jetNetToolNode: INodeType;

	beforeEach(() => {
		jetNetToolNode = new JetNetTool();
	});

	describe('Node Description', () => {
		it('should have correct basic properties', () => {
			expect(jetNetToolNode.description.displayName).toBe('JetNet Tool');
			expect(jetNetToolNode.description.name).toBe('jetNetTool');
			expect(jetNetToolNode.description.version).toBe(1);
			expect(jetNetToolNode.description.group).toEqual(['output']);
		});

		it('should have credentials configured', () => {
			expect(jetNetToolNode.description.credentials).toHaveLength(1);
			expect(jetNetToolNode.description.credentials![0].name).toBe('jetNetApi');
			expect(jetNetToolNode.description.credentials![0].required).toBe(true);
		});

		it('should have correct inputs and outputs', () => {
			expect(jetNetToolNode.description.inputs).toEqual(['main']);
			expect(jetNetToolNode.description.outputs).toEqual(['main']);
		});

		it('should have tool description property', () => {
			const toolDescProperty = jetNetToolNode.description.properties.find(
				prop => prop.name === 'toolDescription'
			);
			expect(toolDescProperty).toBeDefined();
			expect(toolDescProperty?.type).toBe('string');
			expect(toolDescProperty?.typeOptions?.rows).toBe(2);
		});

		it('should have auto-generate description option', () => {
			const autoDescProperty = jetNetToolNode.description.properties.find(
				prop => prop.name === 'autoGenerateDescription'
			);
			// This property may not exist in the actual implementation
			if (autoDescProperty) {
				expect(autoDescProperty?.type).toBe('boolean');
				expect(autoDescProperty?.default).toBe(true);
			} else {
				expect(autoDescProperty).toBeUndefined();
			}
		});

		it('should have resource property', () => {
			const resourceProperty = jetNetToolNode.description.properties.find(
				prop => prop.name === 'resource'
			);
			expect(resourceProperty).toBeDefined();
			expect(resourceProperty?.type).toBe('options');
			expect(resourceProperty?.options).toHaveLength(4);
		});

		it('should have all required resources', () => {
			const resourceProperty = jetNetToolNode.description.properties.find(
				prop => prop.name === 'resource'
			);
			const resourceNames = resourceProperty?.options?.map((opt: any) => opt.value);
			expect(resourceNames).toContain('aircraft');
			expect(resourceNames).toContain('company');
			expect(resourceNames).toContain('contact');
			expect(resourceNames).toContain('market');
		});
	});

	describe('Tool-specific Features', () => {
		it('should have description for AI agents', () => {
			expect(jetNetToolNode.description.description).toContain('AI Agents');
		});

		it('should have proper subtitle expression', () => {
			expect(jetNetToolNode.description.subtitle).toBe('={{$parameter["operation"] + ": " + $parameter["resource"]}}');
		});
	});

	describe('Execute Method', () => {
		it('should have execute method', () => {
			expect(typeof jetNetToolNode.execute).toBe('function');
		});
	});

	describe('Auto-description Generation', () => {
		it('should generate appropriate descriptions for operations', () => {
			// This test would require mocking the internal generateAutoDescription function
			// For now, we just verify the function exists in the module
			expect(jetNetToolNode).toBeDefined();
		});
	});
});